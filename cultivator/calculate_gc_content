#!/usr/bin/env python
# calculate_gc_content
# Based on https://github.com/kundajelab/chrombpnet/blob/master/src/helpers/make_gc_matched_negatives/get_genomewide_gc_buckets/get_genomewide_gc_bins.py
# by Anusri Pampari, Surag Nair, Austin Wang, Anna Shcherbina

# Author: Jacob Schreiber <jmschreiber91@gmail.com>

import numpy
import pyfaidx
import pyBigWig
import argparse

from tqdm import tqdm

def parse_args():
    parser=argparse.ArgumentParser(description="Calculate GC content genome-wide.")
    parser.add_argument("-f", "--fasta", required=True, help="Genome fasta file")
    parser.add_argument("-b", "--bigwig", required=True, help="Bigwig file to store results.")
    parser.add_argument("-w", "--width", type=int, default=2114, help="Width for calculating GC content.")
    parser.add_argument("-v", "--verbose", action='store_true')
    return parser.parse_args()

def calculate_gc(sequence, width):
    """Get the GC percentage across an entire string.

    This function takes in a string `sequence' and calculates the GC percentage
    across each window of size `width'. The returned array is aligned such that
    the number represents the GC content with that position being the midpoint,
    i.e., `gc[i]'' is the GC percentage of `sequence[i-width//2:i+width//2]'

    Parameters
    ----------
    sequence: str
        A string made up of the alphabet 'A', 'C', 'G', 'T'.

    width: int
        The width of he window to calculate the GC content for.

    Returns
    -------
    gc: numpy.ndarray, shape=(len(sequence))
        An array of GC percentages that range between 0 and 1.
    """

    chars = ('C', 'G')
    n = len(sequence)
    k = width // 2

    is_gc = numpy.isin(list(sequence), chars)
    gc_sum = numpy.cumsum(is_gc)

    gc = numpy.zeros(n)
    gc[:k] = numpy.nan
    gc[-k:] = numpy.nan
    gc[k:-k] = (gc_sum[width:] - gc_sum[:-width]) / width
    return gc

def calculate_gc_genomewide(fasta, bigwig, width, include_chroms=None,
    verbose=False):
    """Calculate GC percentages across an entire fasta file.

    This function takes in the string names of a fasta file to calculate
    GC percentages for and a bigwig file to write these values out to.
    The width parameter is the width of the window that GC percentages
    are calculated for.

    This function does not explicitly return anything but writes the
    results out to the bigwig file.

    Parameters
    ----------
    fasta: str
        The filename of a properly formatted fasta file.

    bigwig: str
        The filename of a bigwig file to create with the results.

    width: int
        The width of the window to calculate GC percentages for.

    include_chroms: list or None
        A list of the chromosomes to process. The bigwig will only
        contain entries for these chromosomes. Each entry must be
        in the fasta file. If None, will use all chromosomes in the
        fasta file. Default is None. 

    verbose: bool, optional
        Whether to print status during calculation. Default is None.
    """

    fa = pyfaidx.Fasta(fasta, as_raw=True)

    chroms = include_chroms or list(fa.keys())
    chrom_sizes = {}
    gcs = {}

    for chrom in tqdm(chroms, desc="Calculating", disable=not verbose):
        sequence = fa[chrom][:].upper()
        chrom_sizes[chrom] = len(sequence)

        gc = calculate_gc(sequence, width)
        gcs[chrom] = gc

    bw = pyBigWig.open(bigwig, "w")
    bw.addHeader(list(chrom_sizes.items()), maxZooms=0)
    for chrom in tqdm(chroms, desc="Writing", disable=not verbose):
        bw.addEntries(chrom, 0, values=gcs[chrom], span=1, step=1)
    
    bw.close()
    fa.close()

if __name__=="__main__":
    chroms = ['chr{}'.format(i) for i in range(1, 23)] + ['chrX']
    args = parse_args()
    calculate_gc_genomewide(args.fasta, args.bigwig, args.width, chroms, args.verbose)